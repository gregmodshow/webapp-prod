{"version":3,"sources":["views/Test/Test.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/regenerator-runtime/runtime.js","graphql/mutations.js","actions/showActions.js","graphql/queries.js"],"names":["Test","ratingUpdate","id","starTotalRatings","starAverageRating","this","props","updateShowRating","console","log","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Component","connect","state","isLoading","shows","isLoaded","show","item","data","getShow","module","exports","__webpack_require__","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","d","__webpack_exports__","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","obj","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","updateRatingShow","createRating","API","configure","awsmobile","fetchShow","_ref","asyncToGenerator","regenerator_default","_callee","dispatch","_context","graphql","graphqlOperation","GET_SHOW","payload","_x","updateData","_ref2","_callee2","_context2","input","UPDATE_RATINGSHOW","_x2","fetchShows","_ref3","_callee3","_context3","_x3"],"mappings":"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","file":"static/js/17.37791fe6.chunk.js","sourcesContent":["import React, { Component, useState, render } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { updateShowRating } from '../../actions/showActions';\r\n\r\n\r\nclass Test extends Component {\r\n\r\n  render() {\r\n\r\n    var ratingUpdate = {\r\n      id: \"1\",\r\n      starTotalRatings: 13,\r\n      starAverageRating: \"3\"\r\n    }\r\n\r\n    this.props.updateShowRating(ratingUpdate);\r\n\r\n    console.log('views',ratingUpdate);\r\n\r\n    return (\r\n      <div>\r\n        <h1> Test </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoading: state.shows.isLoading,\r\n  isLoaded: state.shows.isLoaded,\r\n  show: state.shows.item.data.getShow\r\n});\r\n\r\nexport default connect(mapStateToProps, { updateShowRating })(Test);\r\n//export default Test;\r\n","module.exports = require(\"regenerator-runtime\");\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\r\n  try {\r\n    var info = gen[key](arg);\r\n    var value = info.value;\r\n  } catch (error) {\r\n    reject(error);\r\n    return;\r\n  }\r\n\r\n  if (info.done) {\r\n    resolve(value);\r\n  } else {\r\n    Promise.resolve(value).then(_next, _throw);\r\n  }\r\n}\r\n\r\nexport default function _asyncToGenerator(fn) {\r\n  return function () {\r\n    var self = this,\r\n        args = arguments;\r\n    return new Promise(function (resolve, reject) {\r\n      var gen = fn.apply(self, args);\r\n\r\n      function _next(value) {\r\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\r\n      }\r\n\r\n      function _throw(err) {\r\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\r\n      }\r\n\r\n      _next(undefined);\r\n    });\r\n  };\r\n}","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\ntypeof module === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}","// eslint-disable\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const updateRatingShow = `mutation updateShow($input: UpdateShowInput!) {\r\n  updateShow(input: $input) {\r\n    id\r\n    firstEpisode\r\n    creator\r\n    description\r\n    director\r\n    category\r\n    starring\r\n    status\r\n    website\r\n    writers\r\n    starTotalRatings\r\n    starAverageRating\r\n    seasons {\r\n      items {\r\n        id\r\n        status\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const createRating = `mutation createRating($input: CreateRatingInput!) {\r\n  createRating(input: $input) {\r\n    id\r\n    tags\r\n    userId\r\n    starRating\r\n  }\r\n}\r\n`;\r\n\r\nexport const createShow = `mutation CreateShow($input: CreateShowInput!) {\r\n  createShow(input: $input) {\r\n    id\r\n    name\r\n    firstEpisode\r\n    creator\r\n    description\r\n    director\r\n    category\r\n    starring\r\n    status\r\n    website\r\n    writers\r\n    seasons {\r\n      items {\r\n        id\r\n        title\r\n        status\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const updateShow = `mutation UpdateShow($input: UpdateShowInput!) {\r\n  updateShow(input: $input) {\r\n    id\r\n    name\r\n    firstEpisode\r\n    creator\r\n    description\r\n    director\r\n    category\r\n    starring\r\n    status\r\n    website\r\n    writers\r\n    seasons {\r\n      items {\r\n        id\r\n        title\r\n        status\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const deleteShow = `mutation DeleteShow($input: DeleteShowInput!) {\r\n  deleteShow(input: $input) {\r\n    id\r\n    name\r\n    firstEpisode\r\n    creator\r\n    description\r\n    director\r\n    category\r\n    starring\r\n    status\r\n    website\r\n    writers\r\n    seasons {\r\n      items {\r\n        id\r\n        title\r\n        status\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const createSeason = `mutation CreateSeason($input: CreateSeasonInput!) {\r\n  createSeason(input: $input) {\r\n    id\r\n    title\r\n    status\r\n    show {\r\n      id\r\n      name\r\n      firstEpisode\r\n      creator\r\n      description\r\n      director\r\n      category\r\n      starring\r\n      status\r\n      website\r\n      writers\r\n      seasons {\r\n        nextToken\r\n      }\r\n    }\r\n    episodes {\r\n      items {\r\n        id\r\n        number\r\n        title\r\n        description\r\n        videofile\r\n        time\r\n        converted\r\n        tags\r\n        uploaded\r\n        status\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const updateSeason = `mutation UpdateSeason($input: UpdateSeasonInput!) {\r\n  updateSeason(input: $input) {\r\n    id\r\n    title\r\n    status\r\n    show {\r\n      id\r\n      name\r\n      firstEpisode\r\n      creator\r\n      description\r\n      director\r\n      category\r\n      starring\r\n      status\r\n      website\r\n      writers\r\n      seasons {\r\n        nextToken\r\n      }\r\n    }\r\n    episodes {\r\n      items {\r\n        id\r\n        number\r\n        title\r\n        description\r\n        videofile\r\n        time\r\n        converted\r\n        tags\r\n        uploaded\r\n        status\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const deleteSeason = `mutation DeleteSeason($input: DeleteSeasonInput!) {\r\n  deleteSeason(input: $input) {\r\n    id\r\n    title\r\n    status\r\n    show {\r\n      id\r\n      name\r\n      firstEpisode\r\n      creator\r\n      description\r\n      director\r\n      category\r\n      starring\r\n      status\r\n      website\r\n      writers\r\n      seasons {\r\n        nextToken\r\n      }\r\n    }\r\n    episodes {\r\n      items {\r\n        id\r\n        number\r\n        title\r\n        description\r\n        videofile\r\n        time\r\n        converted\r\n        tags\r\n        uploaded\r\n        status\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const createEpisode = `mutation CreateEpisode($input: CreateEpisodeInput!) {\r\n  createEpisode(input: $input) {\r\n    id\r\n    number\r\n    title\r\n    description\r\n    videofile\r\n    time\r\n    converted\r\n    tags\r\n    uploaded\r\n    status\r\n    season {\r\n      id\r\n      title\r\n      status\r\n      show {\r\n        id\r\n        name\r\n        firstEpisode\r\n        creator\r\n        description\r\n        director\r\n        category\r\n        starring\r\n        status\r\n        website\r\n        writers\r\n      }\r\n      episodes {\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const updateEpisode = `mutation UpdateEpisode($input: UpdateEpisodeInput!) {\r\n  updateEpisode(input: $input) {\r\n    id\r\n    number\r\n    title\r\n    description\r\n    videofile\r\n    time\r\n    converted\r\n    tags\r\n    uploaded\r\n    status\r\n    season {\r\n      id\r\n      title\r\n      status\r\n      show {\r\n        id\r\n        name\r\n        firstEpisode\r\n        creator\r\n        description\r\n        director\r\n        category\r\n        starring\r\n        status\r\n        website\r\n        writers\r\n      }\r\n      episodes {\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const deleteEpisode = `mutation DeleteEpisode($input: DeleteEpisodeInput!) {\r\n  deleteEpisode(input: $input) {\r\n    id\r\n    number\r\n    title\r\n    description\r\n    videofile\r\n    time\r\n    converted\r\n    tags\r\n    uploaded\r\n    status\r\n    season {\r\n      id\r\n      title\r\n      status\r\n      show {\r\n        id\r\n        name\r\n        firstEpisode\r\n        creator\r\n        description\r\n        director\r\n        category\r\n        starring\r\n        status\r\n        website\r\n        writers\r\n      }\r\n      episodes {\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n","import { GET_SHOW, UPDATE_RATINGSHOW } from './types';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport { getShow } from '../graphql/queries';\r\nimport { updateRatingShow } from '../graphql/mutations';\r\n\r\nimport awsmobile from '../aws-exports.js';\r\n\r\nAPI.configure(awsmobile);\r\n\r\n//query show by id\r\nexport const fetchShow = id => async dispatch => {\r\n    await API.graphql(graphqlOperation(getShow,{'id':id}))\r\n      .then(\r\n        show =>\r\n          dispatch({\r\n            type: GET_SHOW,\r\n            payload: show\r\n          }))\r\n    .catch( err  => {\r\n      console.log(err);\r\n    })\r\n}\r\n\r\nexport const updateShowRating = updateData => async dispatch => {\r\n    console.log('action',updateData);\r\n    await API.graphql(graphqlOperation(updateRatingShow, { input: updateData }))\r\n      .then(\r\n        show =>\r\n          dispatch({\r\n              type: UPDATE_RATINGSHOW,\r\n              payload: show\r\n          }))\r\n      .catch( err => {\r\n          console.log(err);\r\n      })\r\n}\r\n\r\nexport const fetchShows = () => async dispatch => {\r\n  console.log('Fetch Shows');\r\n}\r\n/*\r\nexport const fetchShows = () => async dispatch => {\r\n  await API.graphql(graphqlOperation(listShows))\r\n    .then(\r\n        shows =>\r\n          dispatch({\r\n            type: FETCH_SHOWS,\r\n            payload: shows\r\n          }))\r\n    .catch( err  => {\r\n      console.log(err);\r\n    })\r\n}\r\n*/","// eslint-disable\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const getShow = `query GetShow($id: ID!) {\r\n  getShow(id: $id) {\r\n    id\r\n    title\r\n    firstEpisode\r\n    creator\r\n    description\r\n    director\r\n    category\r\n    starring\r\n    status\r\n    website\r\n    writers\r\n    audio\r\n    starTotalRatings\r\n    starAverageRating\r\n    filmRating\r\n    subtitle\r\n    year\r\n    seasons {\r\n      items {\r\n        id\r\n        status\r\n        number\r\n        episodes{\r\n          items{\r\n            id\r\n            number\r\n            title\r\n            description\r\n            videofile\r\n            time\r\n            converted\r\n            tags\r\n            uploaded\r\n            status\r\n          }\r\n        }\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const listShows = `query ListShows(\r\n  $filter: ModelShowFilterInput\r\n  $limit: Int\r\n  $nextToken: String\r\n) {\r\n  listShows(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n    items {\r\n      id\r\n      title\r\n      firstEpisode\r\n      creator\r\n      description\r\n      director\r\n      category\r\n      starring\r\n      status\r\n      website\r\n      writers\r\n      seasons {\r\n        nextToken\r\n      }\r\n    }\r\n    nextToken\r\n  }\r\n}\r\n`;\r\nexport const getSeason = `query GetSeason($id: ID!) {\r\n  getSeason(id: $id) {\r\n    id\r\n    title\r\n    status\r\n    show {\r\n      id\r\n      title\r\n      name\r\n      firstEpisode\r\n      creator\r\n      description\r\n      category\r\n      starring\r\n      status\r\n      website\r\n      year\r\n      rating\r\n      reviews\r\n      director\r\n      writer\r\n      actor\r\n      subtitle\r\n      audio\r\n      seasons {\r\n        nextToken\r\n      }\r\n    }\r\n    episodes {\r\n      items {\r\n        id\r\n        number\r\n        title\r\n        description\r\n        videofile\r\n        time\r\n        converted\r\n        tags\r\n        uploaded\r\n        status\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const listSeasons = `query ListSeasons(\r\n  $filter: ModelSeasonFilterInput\r\n  $limit: Int\r\n  $nextToken: String\r\n) {\r\n  listSeasons(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n    items {\r\n      id\r\n      title\r\n      status\r\n      show {\r\n        id\r\n        name\r\n        firstEpisode\r\n        creator\r\n        description\r\n        director\r\n        category\r\n        starring\r\n        status\r\n        website\r\n        writers\r\n      }\r\n      episodes {\r\n        nextToken\r\n      }\r\n    }\r\n    nextToken\r\n  }\r\n}\r\n`;\r\nexport const getEpisode = `query GetEpisode($id: ID!) {\r\n  getEpisode(id: $id) {\r\n    id\r\n    number\r\n    title\r\n    description\r\n    videofile\r\n    time\r\n    converted\r\n    tags\r\n    uploaded\r\n    status\r\n    season {\r\n      id\r\n      title\r\n      status\r\n      show {\r\n        id\r\n        name\r\n        firstEpisode\r\n        creator\r\n        description\r\n        director\r\n        category\r\n        starring\r\n        status\r\n        website\r\n        writers\r\n      }\r\n      episodes {\r\n        nextToken\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const listEpisodes = `query ListEpisodes(\r\n  $filter: ModelEpisodeFilterInput\r\n  $limit: Int\r\n  $nextToken: String\r\n) {\r\n  listEpisodes(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n    items {\r\n      id\r\n      number\r\n      title\r\n      description\r\n      videofile\r\n      time\r\n      converted\r\n      tags\r\n      uploaded\r\n      status\r\n      season {\r\n        id\r\n        title\r\n        status\r\n      }\r\n    }\r\n    nextToken\r\n  }\r\n}\r\n`;\r\n"],"sourceRoot":""}